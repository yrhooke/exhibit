# Generated by Django 2.2.4 on 2020-03-26 03:13

from django.db import migrations


def copy_artwork_sale_data(artwork, saledata):
    """copy relevant data fields from Artwork into SaleData instance
    returns modified instance
    """
    default_owner = "Rotem Reshef"
    sale = saledata

    # sale.buyer can't be filled right now
    if artwork.owner != default_owner:
        sale.notes += f"Owner: {artwork.owner}"

    # sale.agent can't be filled right now
    if artwork.sold_by:
        sale.notes += f"\nAgent: {artwork.sold_by}"

    sale.sale_currency = artwork.sale_currency
    sale.sale_price = artwork.sale_price
    if artwork.discount:
        sale.discount = str(artwork.discount)
    # sale.agent_fee has no equivalent value
    # sale.amount_to_artist has no equivalent value
    sale.sale_date = artwork.sale_date

    return sale


def fill_salesdata(apps, schema_editor):
    """fill SaleData table using data from Artwork"""
    Artwork = apps.get_model('catalogue', 'Artwork')
    SaleData = apps.get_model('catalogue', 'SaleData')

    empty_sale = SaleData()

    for artwork in Artwork.objects.all():
        sale = copy_artwork_sale_data(artwork, SaleData())

        is_empty_sale = all(
            [
                sale.notes == empty_sale.notes,
                sale.sale_currency == empty_sale.sale_currency,
                sale.sale_price == empty_sale.sale_price,
                sale.discount == empty_sale.discount,
                sale.sale_date == empty_sale.sale_date
            ]
        )

        if not is_empty_sale:
            sale.artwork = artwork
            sale.save()

# tests, not used in migration proper


def artwork_sale_data(artwork):
    return {
        'owner': artwork.owner,
        'sold_by': artwork.sold_by,
        'sale_price': artwork.sale_price,
        'sale_currency': artwork.sale_currency,
        'discount': artwork.discount,
        'sale_date': artwork.sale_date,
    }


def saledata_sale_data(sale):
    return {
        'notes': sale.notes,
        'sale_currency': sale.sale_currency,
        'sale_price': sale.sale_price,
        'discount': sale.discount,
        'sale_date': sale.sale_date,
    }


artwork_no_sale_data = {
    'owner': "Rotem Reshef",
    'sold_by': "",
    'sale_price': None,
    'sale_currency': "",
    'discount': None,
    'sale_date': None,
}


def artwork_has_default_sales_data(artwork):
    return artwork_sale_data(artwork) == artwork_no_sale_data


def check_all_artworks():
    artworks = Artwork.objects.all()

    mistakes = 0
    for a in artworks:
        sales = SaleData.objects.filter(artwork__pk=a.pk)
        is_default = artwork_has_default_sales_data(a)

        if is_default and sales.count() > 0:
            print(f"{a.pk} - has a sale but shouldn't")
            mistakes += 1

        if (not is_default) and sales.count() == 0:
            print(f"{a.pk} = should have a sale but doesn't")
            mistakes += 1

    if mistakes == 0:
        print("Done! looks good!")


class Migration(migrations.Migration):

    dependencies = [
        ('catalogue', '0041_saledata_notes'),
    ]

    operations = [
        migrations.RunPython(fill_salesdata),
    ]
